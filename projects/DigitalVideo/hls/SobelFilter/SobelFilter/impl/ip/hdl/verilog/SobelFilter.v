// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SobelFilter_SobelFilter,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=36,HLS_VERSION=2020_2}" *)

module SobelFilter (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        DataIn,
        DataOut_TDATA,
        DataOut_TVALID,
        DataOut_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] DataIn;
output  [31:0] DataOut_TDATA;
output   DataOut_TVALID;
input   DataOut_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    DataOut_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg   [31:0] DataIn_assign_fu_32;
reg    ap_block_state1;
reg   [31:0] ap_sig_allocacmp_DataIn_assign_load;
wire    regslice_both_DataOut_U_apdone_blk;
reg    ap_block_state2;
reg   [1:0] ap_NS_fsm;
reg    DataOut_TVALID_int_regslice;
wire    DataOut_TREADY_int_regslice;
wire    regslice_both_DataOut_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

SobelFilter_regslice_both #(
    .DataWidth( 32 ))
regslice_both_DataOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_sig_allocacmp_DataIn_assign_load),
    .vld_in(DataOut_TVALID_int_regslice),
    .ack_in(DataOut_TREADY_int_regslice),
    .data_out(DataOut_TDATA),
    .vld_out(regslice_both_DataOut_U_vld_out),
    .ack_out(DataOut_TREADY),
    .apdone_blk(regslice_both_DataOut_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == DataOut_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state1))) begin
        DataIn_assign_fu_32 <= DataIn;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        DataOut_TDATA_blk_n = DataOut_TREADY_int_regslice;
    end else begin
        DataOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == DataOut_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state1))) begin
        DataOut_TVALID_int_regslice = 1'b1;
    end else begin
        DataOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_DataOut_U_apdone_blk == 1'b1) | (1'b0 == DataOut_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_DataOut_U_apdone_blk == 1'b1) | (1'b0 == DataOut_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ap_sig_allocacmp_DataIn_assign_load = DataIn;
    end else begin
        ap_sig_allocacmp_DataIn_assign_load = DataIn_assign_fu_32;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == DataOut_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_DataOut_U_apdone_blk == 1'b1) | (1'b0 == DataOut_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DataOut_TVALID = regslice_both_DataOut_U_vld_out;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == DataOut_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_DataOut_U_apdone_blk == 1'b1) | (1'b0 == DataOut_TREADY_int_regslice));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

endmodule //SobelFilter
