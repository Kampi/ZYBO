-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SobelFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    DataIn : IN STD_LOGIC_VECTOR (31 downto 0);
    DataOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataOut_TVALID : OUT STD_LOGIC;
    DataOut_TREADY : IN STD_LOGIC );
end;


architecture behav of SobelFilter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SobelFilter_SobelFilter,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=36,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal DataOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal DataIn_assign_fu_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_sig_allocacmp_DataIn_assign_load : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_DataOut_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal DataOut_TVALID_int_regslice : STD_LOGIC;
    signal DataOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_DataOut_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SobelFilter_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_DataOut_U : component SobelFilter_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_sig_allocacmp_DataIn_assign_load,
        vld_in => DataOut_TVALID_int_regslice,
        ack_in => DataOut_TREADY_int_regslice,
        data_out => DataOut_TDATA,
        vld_out => regslice_both_DataOut_U_vld_out,
        ack_out => DataOut_TREADY,
        apdone_blk => regslice_both_DataOut_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = DataOut_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                DataIn_assign_fu_32 <= DataIn;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, regslice_both_DataOut_U_apdone_blk, DataOut_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = DataOut_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((regslice_both_DataOut_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = DataOut_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    DataOut_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, DataOut_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            DataOut_TDATA_blk_n <= DataOut_TREADY_int_regslice;
        else 
            DataOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    DataOut_TVALID <= regslice_both_DataOut_U_vld_out;

    DataOut_TVALID_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, DataOut_TREADY_int_regslice)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = DataOut_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            DataOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            DataOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, DataOut_TREADY_int_regslice)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = DataOut_TREADY_int_regslice));
    end process;


    ap_block_state2_assign_proc : process(regslice_both_DataOut_U_apdone_blk, DataOut_TREADY_int_regslice)
    begin
                ap_block_state2 <= ((regslice_both_DataOut_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = DataOut_TREADY_int_regslice));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, regslice_both_DataOut_U_apdone_blk, DataOut_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_DataOut_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = DataOut_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_DataOut_U_apdone_blk, DataOut_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_DataOut_U_apdone_blk = ap_const_logic_1) or (ap_const_logic_0 = DataOut_TREADY_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_DataIn_assign_load_assign_proc : process(ap_CS_fsm_state1, DataIn, DataIn_assign_fu_32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ap_sig_allocacmp_DataIn_assign_load <= DataIn;
        else 
            ap_sig_allocacmp_DataIn_assign_load <= DataIn_assign_fu_32;
        end if; 
    end process;

end behav;
