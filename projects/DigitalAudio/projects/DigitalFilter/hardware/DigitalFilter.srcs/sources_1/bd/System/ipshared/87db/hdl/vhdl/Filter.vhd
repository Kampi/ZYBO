-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    DataIn_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    DataIn_TVALID : IN STD_LOGIC;
    DataIn_TREADY : OUT STD_LOGIC;
    DataOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataOut_TVALID : OUT STD_LOGIC;
    DataOut_TREADY : IN STD_LOGIC;
    Enable : IN STD_LOGIC );
end;


architecture behav of Filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Filter,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=60,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=412,HLS_SYN_LUT=352,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ShiftRegRight_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ShiftRegRight_V_ce0 : STD_LOGIC;
    signal ShiftRegRight_V_we0 : STD_LOGIC;
    signal ShiftRegRight_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ShiftRegRight_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ShiftRegLeft_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ShiftRegLeft_V_ce0 : STD_LOGIC;
    signal ShiftRegLeft_V_we0 : STD_LOGIC;
    signal ShiftRegLeft_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ShiftRegLeft_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Coefficients_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Coefficients_V_ce0 : STD_LOGIC;
    signal Coefficients_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal DataIn_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal DataOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln703_fu_231_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln703_reg_363 : STD_LOGIC_VECTOR (15 downto 0);
    signal Enable_read_read_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_1_reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln20_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln20_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln22_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_289_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_401 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ShiftRegRight_V_load_1_reg_421 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal Coefficients_V_load_reg_426 : STD_LOGIC_VECTOR (17 downto 0);
    signal ShiftRegLeft_V_load_1_reg_431 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln703_1_fu_343_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln703_1_reg_436 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mul_ln703_fu_349_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln703_reg_441 : STD_LOGIC_VECTOR (32 downto 0);
    signal AccRight_V_fu_324_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal AccLeft_V_fu_337_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_2_reg_176 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_s_reg_188 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_phi_mux_i_0_phi_fu_204_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_200 : STD_LOGIC_VECTOR (5 downto 0);
    signal storemerge_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_1_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_279_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_269_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_317_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln703_1_fu_330_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln703_1_fu_343_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_fu_308_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln703_fu_349_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal regslice_both_DataOut_U_apdone_blk : STD_LOGIC;
    signal regslice_both_DataIn_U_apdone_blk : STD_LOGIC;
    signal DataIn_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_TVALID_int : STD_LOGIC;
    signal DataIn_TREADY_int : STD_LOGIC;
    signal regslice_both_DataIn_U_ack_in : STD_LOGIC;
    signal DataOut_TVALID_int : STD_LOGIC;
    signal DataOut_TREADY_int : STD_LOGIC;
    signal regslice_both_DataOut_U_vld_out : STD_LOGIC;

    component Filter_mul_mul_16eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Filter_ShiftRegRibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Filter_CoefficiendEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    ShiftRegRight_V_U : component Filter_ShiftRegRibkb
    generic map (
        DataWidth => 16,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ShiftRegRight_V_address0,
        ce0 => ShiftRegRight_V_ce0,
        we0 => ShiftRegRight_V_we0,
        d0 => ShiftRegRight_V_d0,
        q0 => ShiftRegRight_V_q0);

    ShiftRegLeft_V_U : component Filter_ShiftRegRibkb
    generic map (
        DataWidth => 16,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ShiftRegLeft_V_address0,
        ce0 => ShiftRegLeft_V_ce0,
        we0 => ShiftRegLeft_V_we0,
        d0 => ShiftRegLeft_V_d0,
        q0 => ShiftRegLeft_V_q0);

    Coefficients_V_U : component Filter_CoefficiendEe
    generic map (
        DataWidth => 18,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Coefficients_V_address0,
        ce0 => Coefficients_V_ce0,
        q0 => Coefficients_V_q0);

    Filter_mul_mul_16eOg_U1 : component Filter_mul_mul_16eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        din0 => ShiftRegRight_V_load_1_reg_421,
        din1 => mul_ln703_1_fu_343_p1,
        dout => mul_ln703_1_fu_343_p2);

    Filter_mul_mul_16eOg_U2 : component Filter_mul_mul_16eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        din0 => ShiftRegLeft_V_load_1_reg_431,
        din1 => mul_ln703_fu_349_p1,
        dout => mul_ln703_fu_349_p2);

    regslice_both_DataIn_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => DataIn_TDATA,
        vld_in => DataIn_TVALID,
        ack_in => regslice_both_DataIn_U_ack_in,
        data_out => DataIn_TDATA_int,
        vld_out => DataIn_TVALID_int,
        ack_out => DataIn_TREADY_int,
        apdone_blk => regslice_both_DataIn_U_apdone_blk);

    regslice_both_DataOut_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => storemerge_reg_212,
        vld_in => DataOut_TVALID_int,
        ack_in => DataOut_TREADY_int,
        data_out => DataOut_TDATA,
        vld_out => regslice_both_DataOut_U_vld_out,
        ack_out => DataOut_TREADY,
        apdone_blk => regslice_both_DataOut_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = Enable_read_read_fu_82_p2) and (ap_const_logic_1 = DataIn_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_200 <= ap_const_lv6_12;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_200 <= i_reg_401;
            end if; 
        end if;
    end process;

    p_Val2_2_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = Enable_read_read_fu_82_p2) and (ap_const_logic_1 = DataIn_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_2_reg_176 <= ap_const_lv48_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_Val2_2_reg_176 <= AccLeft_V_fu_337_p2;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = Enable_read_read_fu_82_p2) and (ap_const_logic_1 = DataIn_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_188 <= ap_const_lv48_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_Val2_s_reg_188 <= AccRight_V_fu_324_p2;
            end if; 
        end if;
    end process;

    storemerge_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = Enable_read_read_fu_82_p2) and (ap_const_logic_1 = DataIn_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                storemerge_reg_212 <= DataIn_TDATA_int;
            elsif (((tmp_2_fu_249_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                storemerge_reg_212 <= or_ln_fu_289_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                Coefficients_V_load_reg_426 <= Coefficients_V_q0;
                ShiftRegLeft_V_load_1_reg_431 <= ShiftRegLeft_V_q0;
                ShiftRegRight_V_load_1_reg_421 <= ShiftRegRight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_401 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_249_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln22_reg_382 <= icmp_ln22_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln703_1_reg_436 <= mul_ln703_1_fu_343_p2;
                mul_ln703_reg_441 <= mul_ln703_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln20_reg_373 <= sext_ln20_fu_245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = Enable_read_read_fu_82_p2) and (ap_const_logic_1 = DataIn_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln703_1_reg_368 <= DataIn_TDATA_int(31 downto 16);
                trunc_ln703_reg_363 <= trunc_ln703_fu_231_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_CS_fsm_state9, Enable_read_read_fu_82_p2, ap_CS_fsm_state2, tmp_2_fu_249_p3, regslice_both_DataOut_U_apdone_blk, DataIn_TVALID_int, DataOut_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_lv1_1 = Enable_read_read_fu_82_p2) and (ap_const_logic_1 = DataIn_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_lv1_0 = Enable_read_read_fu_82_p2) and (ap_const_logic_1 = DataIn_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_2_fu_249_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = DataOut_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_const_logic_0 = DataOut_TREADY_int) or (regslice_both_DataOut_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    AccLeft_V_fu_337_p2 <= std_logic_vector(unsigned(p_Val2_2_reg_176) + unsigned(shl_ln703_1_fu_330_p3));
    AccRight_V_fu_324_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_188) + unsigned(shl_ln_fu_317_p3));
    Coefficients_V_address0 <= zext_ln33_fu_302_p1(5 - 1 downto 0);

    Coefficients_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Coefficients_V_ce0 <= ap_const_logic_1;
        else 
            Coefficients_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DataIn_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, DataIn_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            DataIn_TDATA_blk_n <= DataIn_TVALID_int;
        else 
            DataIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    DataIn_TREADY_assign_proc : process(DataIn_TVALID, regslice_both_DataIn_U_ack_in)
    begin
        if (((regslice_both_DataIn_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = DataIn_TVALID))) then 
            DataIn_TREADY <= ap_const_logic_1;
        else 
            DataIn_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    DataIn_TREADY_int_assign_proc : process(ap_CS_fsm_state1, DataIn_TVALID_int)
    begin
        if (((ap_const_logic_1 = DataIn_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            DataIn_TREADY_int <= ap_const_logic_1;
        else 
            DataIn_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    DataOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, DataOut_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            DataOut_TDATA_blk_n <= DataOut_TREADY_int;
        else 
            DataOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    DataOut_TVALID <= regslice_both_DataOut_U_vld_out;

    DataOut_TVALID_int_assign_proc : process(ap_CS_fsm_state8, DataOut_TREADY_int)
    begin
        if (((ap_const_logic_1 = DataOut_TREADY_int) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            DataOut_TVALID_int <= ap_const_logic_1;
        else 
            DataOut_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    Enable_read_read_fu_82_p2 <= (0=>Enable, others=>'-');

    ShiftRegLeft_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_257_p2, tmp_2_fu_249_p3, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln29_1_fu_263_p1, zext_ln29_fu_297_p1, zext_ln33_fu_302_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ShiftRegLeft_V_address0 <= zext_ln33_fu_302_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ShiftRegLeft_V_address0 <= zext_ln29_fu_297_p1(5 - 1 downto 0);
        elsif (((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ShiftRegLeft_V_address0 <= ap_const_lv5_0;
        elsif (((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ShiftRegLeft_V_address0 <= zext_ln29_1_fu_263_p1(5 - 1 downto 0);
        else 
            ShiftRegLeft_V_address0 <= "XXXXX";
        end if; 
    end process;


    ShiftRegLeft_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_257_p2, tmp_2_fu_249_p3, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ShiftRegLeft_V_ce0 <= ap_const_logic_1;
        else 
            ShiftRegLeft_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ShiftRegLeft_V_d0_assign_proc : process(ShiftRegLeft_V_q0, trunc_ln703_1_reg_368, ap_CS_fsm_state2, icmp_ln22_fu_257_p2, tmp_2_fu_249_p3, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ShiftRegLeft_V_d0 <= ShiftRegLeft_V_q0;
        elsif (((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ShiftRegLeft_V_d0 <= trunc_ln703_1_reg_368;
        else 
            ShiftRegLeft_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ShiftRegLeft_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_257_p2, icmp_ln22_reg_382, tmp_2_fu_249_p3, ap_CS_fsm_state3)
    begin
        if ((((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln22_reg_382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ShiftRegLeft_V_we0 <= ap_const_logic_1;
        else 
            ShiftRegLeft_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ShiftRegRight_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_257_p2, tmp_2_fu_249_p3, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln29_1_fu_263_p1, zext_ln29_fu_297_p1, zext_ln33_fu_302_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ShiftRegRight_V_address0 <= zext_ln33_fu_302_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ShiftRegRight_V_address0 <= zext_ln29_fu_297_p1(5 - 1 downto 0);
        elsif (((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ShiftRegRight_V_address0 <= ap_const_lv5_0;
        elsif (((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ShiftRegRight_V_address0 <= zext_ln29_1_fu_263_p1(5 - 1 downto 0);
        else 
            ShiftRegRight_V_address0 <= "XXXXX";
        end if; 
    end process;


    ShiftRegRight_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_257_p2, tmp_2_fu_249_p3, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ShiftRegRight_V_ce0 <= ap_const_logic_1;
        else 
            ShiftRegRight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ShiftRegRight_V_d0_assign_proc : process(ShiftRegRight_V_q0, trunc_ln703_reg_363, ap_CS_fsm_state2, icmp_ln22_fu_257_p2, tmp_2_fu_249_p3, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ShiftRegRight_V_d0 <= ShiftRegRight_V_q0;
        elsif (((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ShiftRegRight_V_d0 <= trunc_ln703_reg_363;
        else 
            ShiftRegRight_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ShiftRegRight_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_257_p2, icmp_ln22_reg_382, tmp_2_fu_249_p3, ap_CS_fsm_state3)
    begin
        if ((((tmp_2_fu_249_p3 = ap_const_lv1_0) and (icmp_ln22_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln22_reg_382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ShiftRegRight_V_we0 <= ap_const_logic_1;
        else 
            ShiftRegRight_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_phi_mux_i_0_phi_fu_204_p4 <= i_0_reg_200;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_224_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_phi_mux_i_0_phi_fu_204_p4, i_0_reg_200)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_224_p0 <= i_0_reg_200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_224_p0 <= ap_phi_mux_i_0_phi_fu_204_p4;
        else 
            grp_fu_224_p0 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_224_p2 <= std_logic_vector(signed(grp_fu_224_p0) + signed(ap_const_lv6_3F));
    icmp_ln22_fu_257_p2 <= "1" when (i_0_reg_200 = ap_const_lv6_0) else "0";
    mul_ln703_1_fu_343_p1 <= sext_ln1118_fu_308_p1(18 - 1 downto 0);
    mul_ln703_fu_349_p1 <= sext_ln1118_fu_308_p1(18 - 1 downto 0);
    or_ln_fu_289_p3 <= (tmp_1_fu_279_p4 & tmp_fu_269_p4);
        sext_ln1118_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Coefficients_V_load_reg_426),33));

        sext_ln20_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_200),32));

    shl_ln703_1_fu_330_p3 <= (mul_ln703_reg_441 & ap_const_lv15_0);
    shl_ln_fu_317_p3 <= (mul_ln703_1_reg_436 & ap_const_lv15_0);
    tmp_1_fu_279_p4 <= p_Val2_2_reg_176(47 downto 32);
    tmp_2_fu_249_p3 <= i_0_reg_200(5 downto 5);
    tmp_fu_269_p4 <= p_Val2_s_reg_188(47 downto 32);
    trunc_ln703_fu_231_p1 <= DataIn_TDATA_int(16 - 1 downto 0);
    zext_ln29_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_224_p2),64));
    zext_ln29_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln20_reg_373),64));
    zext_ln33_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln20_reg_373),64));
end behav;
