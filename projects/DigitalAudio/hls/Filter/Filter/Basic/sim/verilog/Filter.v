// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Filter,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=2,HLS_SYN_LUT=33,HLS_VERSION=2019_2_1}" *)

module Filter (
        ap_clk,
        ap_rst_n,
        DataIn_TDATA,
        DataIn_TVALID,
        DataIn_TREADY,
        DataOut_TDATA,
        DataOut_TVALID,
        DataOut_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input  [31:0] DataIn_TDATA;
input   DataIn_TVALID;
output   DataIn_TREADY;
output  [31:0] DataOut_TDATA;
output   DataOut_TVALID;
input   DataOut_TREADY;

reg DataIn_TREADY;

 reg    ap_rst_n_inv;
reg    DataIn_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    DataOut_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire  signed [24:0] loc_V_fu_53_p1;
wire  signed [42:0] r_V_1_fu_83_p2;
wire   [23:0] trunc_ln_fu_61_p4;
wire   [25:0] tmp_fu_70_p3;
wire   [17:0] r_V_1_fu_83_p0;
reg   [1:0] ap_NS_fsm;
wire    regslice_both_DataOut_U_apdone_blk;
wire    regslice_both_DataIn_U_apdone_blk;
wire   [31:0] DataIn_TDATA_int;
wire    DataIn_TVALID_int;
reg    DataIn_TREADY_int;
wire    regslice_both_DataIn_U_ack_in;
wire   [31:0] DataOut_TDATA_int;
reg    DataOut_TVALID_int;
wire    DataOut_TREADY_int;
wire    regslice_both_DataOut_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

Filter_mul_mul_18bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 43 ))
Filter_mul_mul_18bkb_U1(
    .din0(r_V_1_fu_83_p0),
    .din1(loc_V_fu_53_p1),
    .dout(r_V_1_fu_83_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_DataIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(DataIn_TDATA),
    .vld_in(DataIn_TVALID),
    .ack_in(regslice_both_DataIn_U_ack_in),
    .data_out(DataIn_TDATA_int),
    .vld_out(DataIn_TVALID_int),
    .ack_out(DataIn_TREADY_int),
    .apdone_blk(regslice_both_DataIn_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_DataOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(DataOut_TDATA_int),
    .vld_in(DataOut_TVALID_int),
    .ack_in(DataOut_TREADY_int),
    .data_out(DataOut_TDATA),
    .vld_out(regslice_both_DataOut_U_vld_out),
    .ack_out(DataOut_TREADY),
    .apdone_blk(regslice_both_DataOut_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        DataIn_TDATA_blk_n = DataIn_TVALID_int;
    end else begin
        DataIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_DataIn_U_ack_in == 1'b1) & (1'b1 == DataIn_TVALID))) begin
        DataIn_TREADY = 1'b1;
    end else begin
        DataIn_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == DataOut_TREADY_int) | (1'b0 == DataIn_TVALID_int)) & (1'b1 == ap_CS_fsm_state1))) begin
        DataIn_TREADY_int = 1'b1;
    end else begin
        DataIn_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        DataOut_TDATA_blk_n = DataOut_TREADY_int;
    end else begin
        DataOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == DataOut_TREADY_int) | (1'b0 == DataIn_TVALID_int)) & (1'b1 == ap_CS_fsm_state1))) begin
        DataOut_TVALID_int = 1'b1;
    end else begin
        DataOut_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == DataOut_TREADY_int) | (1'b0 == DataIn_TVALID_int)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == DataOut_TREADY_int) | (regslice_both_DataOut_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DataOut_TDATA_int = $signed(tmp_fu_70_p3);

assign DataOut_TVALID = regslice_both_DataOut_U_vld_out;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign loc_V_fu_53_p1 = DataIn_TDATA_int[24:0];

assign r_V_1_fu_83_p0 = 43'd119799;

assign tmp_fu_70_p3 = {{trunc_ln_fu_61_p4}, {2'd0}};

assign trunc_ln_fu_61_p4 = {{r_V_1_fu_83_p2[42:19]}};

endmodule //Filter
